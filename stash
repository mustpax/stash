#!/usr/bin/env python
'''stash is a utility for operating on files across many folders.
'''
import json
import os
import shutil
import sys

STASH_FILE = '.stash'

def __stash_file_path():
    return os.path.expanduser(os.path.join('~', STASH_FILE))

def __ensure_stash_file_exists():
    if not os.path.exists(__stash_file_path()):
        with open(__stash_file_path(), 'w') as f:
            f.write('{}')

def __update(func):
    with open(__stash_file_path(), 'r+') as f:
        try:
            data = json.load(f)
        except ValueError:
            sys.stderr.write('Stash file corrupted. Delete this file to continue: %s\n' % __stash_file_path())
            return 1

        data = func(data)
        f.seek(0)
        json.dump(data, f, sort_keys=True, indent=4, separators=(',', ': '))
        f.truncate()
    return 0

def stash(filename):
    filename = os.path.abspath(filename)
    if not os.path.exists(filename):
        sys.stderr.write('File not found: %s\n' % filename)
        return 1

    def f(data):
        print 'Adding file as last item:', filename
        if 'files' not in data:
            data['files'] = []
        data['files'].append(filename)
        return data

    return __update(f)

def pop():
    def f(data):
        if 'files' not in data or len(data['files']) == 0:
            sys.stderr.write('Error: Stash empty. Cannot pop.\n')
            return data
        print data['files'].pop()
        return data

    return __update(f)

def move(target='.'):
    def f(data):
        if 'files' not in data or len(data['files']) == 0:
            sys.stderr.write('Error: Stash empty. Cannot pop.\n')
            return data
        file = data['files'].pop()
        t = os.path.join(target, os.path.basename(file))
        os.rename(file, t)
        print >>sys.stderr, 'Moved from %s to %s' % (file, t)
        return data

    if not os.path.isdir(target):
        print >>sys.stderr, 'Error, target is not a directoy:', target
        return 1

    return __update(f)

def copy(target='.'):
    def f(data):
        if 'files' not in data or len(data['files']) == 0:
            sys.stderr.write('Error: Stash empty. Cannot pop.\n')
            return data
        file = data['files'].pop()
        t = os.path.join(target, os.path.basename(file))
        shutil.copy(file, t)
        print >>sys.stderr, 'Copied from %s to %s' % (file, t)
        return data

    if not os.path.isdir(target):
        print >>sys.stderr, 'Error, target is not a directoy:', target
        return 1

    return __update(f)

USAGE = '''\
Usage: stash [command] [file]
If command is omitted 'stash' is assumed
Commands:
   stash [file]:    save given file at the top of the stash
   pop:             print the file at the top of the stash. remove it from the
                    stash.
   cp [target]:     copy the file at the top of the stash to given target dir.
                    remove it from the stash.
                    if target dir is omitted, current directory is assumed.
   mv [target]:     move the file at the top of the stash to given target dir.
                    remove it from the stash.
                    if target dir is omitted, current directory is assumed.
'''

def usage():
    print >>sys.stderr, USAGE


COMMANDS = {
        'stash':    stash,
        'p':        pop,
        'pop':      pop,
        'cp':       copy,
        'mv':       move,
        }

def main(args):
    __ensure_stash_file_exists()

    if len(args) == 0 or len(args) > 2:
        usage()
        return 1

    cmd = args[0]
    if cmd in COMMANDS:
        return COMMANDS[cmd](*args[1:])

    if os.path.exists(cmd):
        return stash(args[0])

    print >>sys.stderr, 'Unrecognized command:', cmd
    usage()
    return 1

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

